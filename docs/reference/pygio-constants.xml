<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="gio-constants">
  <refnamediv>
    <refname>gio Constants</refname>
    <refpurpose>the built-in constants of the gio module</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Synopsis</title>

<programlisting>
<xref linkend="gio-app-info-constants" endterm="gio-app-info-constants-title"></xref>
<xref linkend="gio-emblem-origin-constants" endterm="gio-emblem-origin-constants-title"></xref>
<xref linkend="gio-error-constants" endterm="gio-error-constants-title"></xref>
<xref linkend="gio-file-attribute-constants" endterm="gio-file-attribute-constants-title"></xref>
<xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
<xref linkend="gio-file-attribute-flags-constants" endterm="gio-file-attribute-flags-constants-title"></xref>
<xref linkend="gio-file-create-flags-constants" endterm="gio-file-create-flags-constants-title"></xref>
<xref linkend="gio-file-copy-flags-constants" endterm="gio-file-copy-flags-constants-title"></xref>
<xref linkend="gio-file-monitor-flags-constants" endterm="gio-file-monitor-flags-constants-title"></xref>
<xref linkend="gio-file-query-info-flags-constants" endterm="gio-file-query-info-flags-constants-title"></xref>
<xref linkend="gio-file-type-constants" endterm="gio-file-type-constants-title"></xref>
<xref linkend="gio-mount-mount-flags-constants" endterm="gio-mount-mount-flags-constants-title"></xref>
<xref linkend="gio-mount-unmount-flags-constants" endterm="gio-mount-unmount-flags-constants-title"></xref>
</programlisting>

  </refsect1>

  <refsect1 id="gio-constants-description">
    <title>Description</title>

    <refsect2 id="gio-app-info-constants">
      <title id="gio-app-info-constants-title">Gio AppInfo Create Flags Constants</title>

      <para>
	  Flags used when creating a <link linkend="class-gioappinfo"><classname>gio.AppInfo</classname></link>
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>gio.APP_INFO_CREATE_NONE</literal></term>
	  <listitem>
	    <simpara>No flags.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.APP_INFO_CREATE_NEEDS_TERMINAL</literal></term>
	  <listitem>
	    <simpara>Application opens in a terminal window. </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.APP_INFO_CREATE_SUPPORTS_URIS</literal></term>
	  <listitem>
	    <simpara>Application supports URI arguments. </simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="gio-emblem-origin-constants">
      <title id="gio-emblem-origin-constants-title">Gio Emblem Origin Constants</title>

      <para>
	  GEmblemOrigin is used to add information about the origin of the emblem to GEmblem.
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>gio.EMBLEM_ORIGIN_DEVICE</literal></term>
	  <listitem>
	    <simpara>Embleme adds device-specific information.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.EMBLEM_ORIGIN_LIVEMETADATA</literal></term>
	  <listitem>
	    <simpara>Emblem depicts live metadata, such as "readonly".</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.EMBLEM_ORIGIN_TAG</literal></term>
	  <listitem>
	    <simpara>Emblem comes from a user-defined tag, e.g. set by nautilus (in the future).</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.EMBLEM_ORIGIN_UNKNOWN</literal></term>
	  <listitem>
	    <simpara>Emblem of unknown origin.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="gio-error-constants">
      <title id="gio-error-constants-title">Gio Error Constants</title>

      <para>
	 GIOError Error codes returned by GIO functions.
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>gio.ERROR_ALREADY_MOUNTED</literal></term>
	  <listitem>
	    <simpara>File is already mounted.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_BUSY</literal></term>
	  <listitem>
	    <simpara>File is busy.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_CANCELLED</literal></term>
	  <listitem>
	    <simpara>Operation was cancelled. See
		<link linkend="class-giocancellable"><classname>gio.Cancellable</classname></link>.
	    </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_CANT_CREATE_BACKUP</literal></term>
	  <listitem>
	    <simpara>Backup couldn't be created.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_CLOSED</literal></term>
	  <listitem>
	    <simpara>File was closed.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_EXISTS</literal></term>
	  <listitem>
	    <simpara>File already exists error.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_FAILED</literal></term>
	  <listitem>
	    <simpara>Generic error condition for when any operation fails.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_FAILED_HANDLED</literal></term>
	  <listitem>
	    <simpara>Operation failed and a helper program has already interacted with
	    the user. Do not display any error dialog. </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_FILENAME_TOO_LONG</literal></term>
	  <listitem>
	    <simpara>Filename is too many characters.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_HOST_NOT_FOUND</literal></term>
	  <listitem>
	    <simpara>Host couldn't be found (remote operations).</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_INVALID_ARGUMENT</literal></term>
	  <listitem>
	    <simpara>Invalid argument.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_INVALID_FILENAME</literal></term>
	  <listitem>
	    <simpara>Filename is invalid or contains invalid characters.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_IS_DIRECTORY</literal></term>
	  <listitem>
	    <simpara>File is a directory error.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_NOT_DIRECTORY</literal></term>
	  <listitem>
	    <simpara>File is not a directory.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_NOT_EMPTY</literal></term>
	  <listitem>
	    <simpara>File is a directory that isn't empty.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_NOT_FOUND</literal></term>
	  <listitem>
	    <simpara>File not found error.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_NOT_MOUNTABLE_FILE</literal></term>
	  <listitem>
	    <simpara>File cannot be mounted.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_NOT_MOUNTED</literal></term>
	  <listitem>
	    <simpara>File isn't mounted. </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_NOT_REGULAR_FILE</literal></term>
	  <listitem>
	    <simpara>File is not a regular file.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_NOT_SUPPORTED</literal></term>
	  <listitem>
	    <simpara>Operation not supported for the current backend.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_NOT_SYMBOLIC_LINK</literal></term>
	  <listitem>
	    <simpara>File is not a symbolic link.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_NO_SPACE</literal></term>
	  <listitem>
	    <simpara>No space left on drive. </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_PENDING</literal></term>
	  <listitem>
	    <simpara>Operations are still pending.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_PERMISSION_DENIED</literal></term>
	  <listitem>
	    <simpara>Permission denied.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_READ_ONLY</literal></term>
	  <listitem>
	    <simpara>File is read only. </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_TIMED_OUT</literal></term>
	  <listitem>
	    <simpara>Operation timed out. </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_TOO_MANY_LINKS</literal></term>
	  <listitem>
	    <simpara>File contains too many symbolic links. </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_TOO_MANY_OPEN_FILES</literal></term>
	  <listitem>
	    <simpara>The current process has too many files open and can't open any
	    more. Duplicate descriptors do count toward this limit. Since 2.20</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_WOULD_BLOCK</literal></term>
	  <listitem>
	    <simpara>Operation would block.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_WOULD_MERGE</literal></term>
	  <listitem>
	    <simpara>Operation would merge files.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_WOULD_RECURSE</literal></term>
	  <listitem>
	    <simpara>Operation would be recursive.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.ERROR_WRONG_ETAG</literal></term>
	  <listitem>
	    <simpara>File's Entity Tag was incorrect. </simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="gio-file-attribute-constants">
      <title id="gio-file-attribute-constants-title">Gio File Attribute Constants</title>

      <para>
	  The file attributes.
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_TYPE</literal></term>
	  <listitem>
	    <simpara>
                "standard::type" A key in the "standard" namespace for storing file types. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT32. The value for this key should contain a
                <xref linkend="gio-file-type-constants" endterm="gio-file-type-constants-title"></xref>
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_IS_HIDDEN</literal></term>
	  <listitem>
	    <simpara>
                "standard::is-hidden" A key in the "standard" namespace for checking if a file is hidden. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_BOOLEAN.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_IS_BACKUP</literal></term>
	  <listitem>
	    <simpara>
                "standard::is-backup" A key in the "standard" namespace for checking if a file is a backup file. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_BOOLEAN.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_IS_SYMLINK</literal></term>
	  <listitem>
	    <simpara>
                "standard::is-symlink" A key in the "standard" namespace for checking if the file is a symlink.
                Typically the actual type is something else, if we followed the symlink to get the type. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_BOOLEAN.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL</literal></term>
	  <listitem>
	    <simpara>
                "standard::is-virtual" A key in the "standard" namespace for checking if a file is virtual. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_BOOLEAN.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_NAME</literal></term>
	  <listitem>
	    <simpara>
                "standard::name" A key in the "standard" namespace for getting the name of the file.
                The name is the on-disk filename which may not be in any known encoding,
                and can thus not be generally displayed as is. Use
                gio.FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME if you need to display the name in a user
                interface. Corresponding GFileAttributeType is gio.FILE_ATTRIBUTE_TYPE_BYTE_STRING.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME</literal></term>
	  <listitem>
	    <simpara>
                "standard::display-name" A key in the "standard" namespace for getting the display
                name of the file. A display name is guaranteed to be in UTF8 and can thus be displayed
                in the UI. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_STRING.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_EDIT_NAME</literal></term>
	  <listitem>
	    <simpara>
                "standard::edit-name" A key in the "standard" namespace for edit name of the file.
                An edit name is similar to the display name, but it is meant to be used when you want
                to rename the file in the UI. The display name might contain information you don't
                want in the new filename (such as "(invalid unicode)" if the filename was in an
                invalid encoding). Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_STRING.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_COPY_NAME</literal></term>
	  <listitem>
	    <simpara>
                "standard::copy-name" A key in the "standard" namespace for getting the copy
                name of the file. The copy name is an optional version of the name. If available
                it's always in UTF8, and corresponds directly to the original filename (only transcoded
                to UTF8). This is useful if you want to copy the file to another filesystem that might
                have a different encoding. If the filename is not a valid string in the encoding selected
                for the filesystem it is in then the copy name will not be set. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_STRING.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_ICON</literal></term>
	  <listitem>
	    <simpara>
                "standard::icon" A key in the "standard" namespace for getting the icon for the file. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_OBJECT. The value for this key should contain a
                <link linkend="class-gioicon"><classname>gio.Icon</classname></link>.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE</literal></term>
	  <listitem>
	    <simpara>
                "standard::content-type" A key in the "standard" namespace for getting the content type of the file. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_STRING. The value for this key should contain a valid content type.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE</literal></term>
	  <listitem>
	    <simpara>
                "standard::fast-content-type" A key in the "standard" namespace for getting the fast
                content type. The fast content type isn't as reliable as the regular one, as it
                only uses the filename to guess it, but it is faster to calculate than the regular
                content type. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_STRING.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_SIZE</literal></term>
	  <listitem>
	    <simpara>
                "standard::size" A key in the "standard" namespace for getting the file's size (in bytes). Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT64.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET</literal></term>
	  <listitem>
	    <simpara>
                "standard::symlink-target" A key in the "standard" namespace for getting the target URI
                for the file, in the case of gio.FILE_TYPE_SHORTCUT or gio.FILE_TYPE_MOUNTABLE files. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is G_FILE_ATTRIBUTE_TYPE_STRING.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_STANDARD_SORT_ORDER</literal></term>
	  <listitem>
	    <simpara>
                "standard::sort-order" A key in the "standard" namespace for setting the sort order of a file. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_INT32. An example use would be in file managers, which would use this
                key to set the order files are displayed. Files with smaller sort order should be sorted first,
                and files without sort order as if sort order was zero.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_ETAG_VALUE</literal></term>
	  <listitem>
	    <simpara>
                "etag::value" A key in the "etag" namespace for getting the value of the file's entity tag. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_STRING.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_ID_FILE</literal></term>
	  <listitem>
	    <simpara>
                "id::file" A key in the "id" namespace for getting a file identifier. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_STRING. An example use would be during listing files,
                to avoid recursive directory scanning.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_ID_FILESYSTEM</literal></term>
	  <listitem>
	    <simpara>
                "id::filesystem" A key in the "id" namespace for getting the file system identifier. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_STRING. An example use would be during drag and
                drop to see if the source and target are on the same filesystem (default to move) or not (default to copy).
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_ACCESS_CAN_READ</literal></term>
	  <listitem>
	    <simpara>
                "access::can-read" A key in the "access" namespace for getting read privileges. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is G_FILE_ATTRIBUTE_TYPE_BOOLEAN. This attribute will be <literal>True</literal>
                if the user is able to read the file.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_ACCESS_CAN_WRITE</literal></term>
	  <listitem>
	    <simpara>
                "access::can-write" A key in the "access" namespace for getting write privileges.Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_BOOLEAN. This attribute will be <literal>True</literal>
                if the user is able to write to the file.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE</literal></term>
	  <listitem>
	    <simpara>
                "access::can-execute" A key in the "access" namespace for getting execution privileges. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_BOOLEAN. This attribute will be <literal>True</literal>
                if the user is able to execute the file.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_ACCESS_CAN_DELETE</literal></term>
	  <listitem>
	    <simpara>
                "access::can-delete" A key in the "access" namespace for checking deletion privileges. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_BOOLEAN. This attribute will be <literal>True</literal>
                if the user is able to delete the file.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_ACCESS_CAN_TRASH</literal></term>
	  <listitem>
	    <simpara>
                "access::can-trash" A key in the "access" namespace for checking trashing privileges. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_BOOLEAN. This attribute will be <literal>True</literal>
                if the user is able to move the file to the trash.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_ACCESS_CAN_RENAME</literal></term>
	  <listitem>
	    <simpara>
                "access::can-rename" A key in the "access" namespace for checking renaming privileges. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is G_FILE_ATTRIBUTE_TYPE_BOOLEAN. This attribute will be <literal>True</literal>
                if the user is able to rename the file.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT</literal></term>
	  <listitem>
	    <simpara>
                "mountable::can-mount" A key in the "mountable" namespace for checking if
                a file (of type G_FILE_TYPE_MOUNTABLE) is mountable. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_BOOLEAN.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT</literal></term>
	  <listitem>
	    <simpara>
                "mountable::can-unmount" A key in the "mountable" namespace for checking if a file
                (of type G_FILE_TYPE_MOUNTABLE) is unmountable. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_BOOLEAN.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT</literal></term>
	  <listitem>
	    <simpara>
                "mountable::can-eject" A key in the "mountable" namespace for checking if a file
                (of type G_FILE_TYPE_MOUNTABLE) can be ejected. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_BOOLEAN.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE</literal></term>
	  <listitem>
	    <simpara>
                "mountable::unix-device" A key in the "mountable" namespace for getting the unix device. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT32.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI</literal></term>
	  <listitem>
	    <simpara>
                "mountable::hal-udi" A key in the "mountable" namespace for getting the
                HAL UDI for the mountable file. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_STRING.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TIME_MODIFIED</literal></term>
	  <listitem>
	    <simpara>
                "time::modified" A key in the "time" namespace for getting the time the file was last modified. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT64, and contains the UNIX time since the file was modified.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TIME_MODIFIED_USEC</literal></term>
	  <listitem>
	    <simpara>
                "time::modified-usec" A key in the "time" namespace for getting the miliseconds
                of the time the file was last modified. This should be used in conjunction
                with G_FILE_ATTRIBUTE_TIME_MODIFIED. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is G_FILE_ATTRIBUTE_TYPE_UINT32.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TIME_ACCESS</literal></term>
	  <listitem>
	    <simpara>
                "time::access" A key in the "time" namespace for getting the time the file was last accessed. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT64, and contains the UNIX time since the file was last accessed.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TIME_ACCESS_USEC</literal></term>
	  <listitem>
	    <simpara>
                "time::access-usec" A key in the "time" namespace for getting the microseconds of
                the time the file was last accessed. This should be used in conjunction
                with G_FILE_ATTRIBUTE_TIME_ACCESS. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT32.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TIME_CHANGED</literal></term>
	  <listitem>
	    <simpara>
                "time::changed" A key in the "time" namespace for getting the time the
                file was last changed. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT64, and contains the UNIX time since the file was last changed.
                This corresponds to the traditional UNIX ctime.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TIME_CHANGED_USEC</literal></term>
	  <listitem>
	    <simpara>
                "time::changed-usec" A key in the "time" namespace for getting the microseconds
                of the time the file was last changed. This should be used in conjunction
                with G_FILE_ATTRIBUTE_TIME_CHANGED. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT32.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TIME_CREATED</literal></term>
	  <listitem>
	    <simpara>
                "time::created" A key in the "time" namespace for getting the time the file was created. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT64, and contains the UNIX time since the file was created.
                This corresponds to the NTFS ctime.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TIME_CREATED_USEC</literal></term>
	  <listitem>
	    <simpara>
                "time::created-usec" A key in the "time" namespace for getting the microseconds of the time the
                file was created. This should be used in conjunction with G_FILE_ATTRIBUTE_TIME_CREATED. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT32.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_UNIX_DEVICE</literal></term>
	  <listitem>
	    <simpara>
                "unix::device" A key in the "unix" namespace for getting the device id of the device the file
                is located on (see stat() documentation). This attribute is only available
                for UNIX file systems. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT32.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_UNIX_INODE</literal></term>
	  <listitem>
	    <simpara>
                "unix::inode" A key in the "unix" namespace for getting the inode of the file. This attribute is only
                available for UNIX file systems. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is G_FILE_ATTRIBUTE_TYPE_UINT64.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_UNIX_MODE</literal></term>
	  <listitem>
	    <simpara>
                "unix::mode" A key in the "unix" namespace for getting the mode of the file (e.g.
                whether the file is a regular file, symlink, etc). See lstat() documentation.
                This attribute is only available for UNIX file systems. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT32.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_UNIX_NLINK</literal></term>
	  <listitem>
	    <simpara>
                "unix::nlink" A key in the "unix" namespace for getting the number of hard links
                for a file. See lstat() documentation. This attribute is only available for UNIX
                file systems. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT32.
            </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_UNIX_UID</literal></term>
	  <listitem>
	    <simpara>
                "unix::uid" A key in the "unix" namespace for getting the user ID for the file. This attribute
                is only available for UNIX file systems. Corresponding
                <xref linkend="gio-file-attribute-type-constants" endterm="gio-file-attribute-type-constants-title"></xref>
                is gio.FILE_ATTRIBUTE_TYPE_UINT32.
            </simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="gio-file-attribute-type-constants">
      <title id="gio-file-attribute-type-constants-title">Gio File Attribute Type Constants</title>

      <para>
	  The data types for file attributes.
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TYPE_BOOLEAN</literal></term>
	  <listitem>
	    <simpara>a boolean value.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TYPE_BYTE_STRING</literal></term>
	  <listitem>
	    <simpara>a zero terminated string of non-zero bytes.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TYPE_INT32</literal></term>
	  <listitem>
	    <simpara>a signed 4-byte/32-bit integer.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TYPE_INT64</literal></term>
	  <listitem>
	    <simpara>a signed 8-byte/64-bit integer.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TYPE_INVALID</literal></term>
	  <listitem>
	    <simpara>indicates an invalid or uninitalized type.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TYPE_OBJECT</literal></term>
	  <listitem>
	    <simpara>a <link linkend="class-gobject">gobject.GObject</link>.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TYPE_STRING</literal></term>
	  <listitem>
	    <simpara>a null terminated UTF8 string.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TYPE_UINT32</literal></term>
	  <listitem>
	    <simpara>an unsigned 4-byte/32-bit integer.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_TYPE_UINT64</literal></term>
	  <listitem>
	    <simpara>an unsigned 8-byte/64-bit integer.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="gio-file-attribute-flags-constants">
      <title id="gio-file-attribute-flags-constants-title">Gio File Attribute Flags Constants</title>

      <para>
	  Flags specifying the behaviour of an attribute.
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_INFO_NONE</literal></term>
	  <listitem>
	    <simpara>no flags set.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_INFO_COPY_WITH_FILE</literal></term>
	  <listitem>
	    <simpara>copy the attribute values when the file is copied.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED</literal></term>
	  <listitem>
	    <simpara>copy the attribute values when the file is moved.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="gio-file-create-flags-constants">
      <title id="gio-file-create-flags-constants-title">Gio File Create Flags Constants</title>

      <para>
	  Flags used when an operation may create a file.
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>gio.FILE_CREATE_NONE</literal></term>
	  <listitem>
	    <simpara>No flags set.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_CREATE_PRIVATE</literal></term>
	  <listitem>
	    <simpara>Create a file that can only be accessed by the current user.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_CREATE_REPLACE_DESTINATION</literal></term>
	  <listitem>
	    <simpara>
		Replace the destination as if it didn't exist before. Don't try
		to keep any old permissions, replace instead of following links. This is
		generally useful if you're doing a "copy over" rather than a "save new version of"
		replace operation. You can think of it as "unlink destination" before writing
		to it, although the implementation may not be exactly like that.
	    </simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="gio-file-copy-flags-constants">
      <title id="gio-file-copy-flags-constants-title">Gio File Copy Flags Constants</title>

      <para>
	  Flags used when copying or moving files.
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>gio.FILE_COPY_NONE</literal></term>
	  <listitem>
	    <simpara>No flags set.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_COPY_OVERWRITE</literal></term>
	  <listitem>
	    <simpara>Overwrite any existing files.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_COPY_BACKUP</literal></term>
	  <listitem>
	    <simpara>Make a backup of any existing files.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_COPY_NOFOLLOW_SYMLINKS</literal></term>
	  <listitem>
	    <simpara>Don't follow symlinks.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_COPY_ALL_METADATA</literal></term>
	  <listitem>
	    <simpara>Copy all file metadata instead of just default set used for copy
	    (see <link linkend="class-giofileinfo"><classname>gio.FileInfo</classname></link>).</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_COPY_NO_FALLBACK_FOR_MOVE</literal></term>
	  <listitem>
	    <simpara>Don't use copy and delete fallback if native move not supported.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_COPY_TARGET_DEFAULT_PERMS</literal></term>
	  <listitem>
	    <simpara>Leaves target file with default perms, instead of setting the source file perms.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="gio-file-monitor-flags-constants">
      <title id="gio-file-monitor-flags-constants-title">Gio File Monitor Flags Constants</title>

      <para>
            Flags used to set what a
            <link linkend="class-giofilemonitor"><classname>gio.FileMonitor</classname></link>
            will watch for.
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>gio.FILE_MONITOR_NONE</literal></term>
	  <listitem>
	    <simpara>No flags set.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_MONITOR_WATCH_MOUNTS</literal></term>
	  <listitem>
	    <simpara>Watch for mount events.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="gio-file-query-info-flags-constants">
      <title id="gio-file-query-info-flags-constants-title">Gio File Query Info Flags Constants</title>

      <para>
	  Flags used when querying a
	  <link linkend="class-giofile"><classname>gio.FileInfo</classname></link>.
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>gio.FILE_QUERY_INFO_NONE</literal></term>
	  <listitem>
	    <simpara>No flags set.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_QUERY_INFO_NOFOLLOW_SYMLINKS</literal></term>
	  <listitem>
	    <simpara>Don't follow symlinks.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="gio-file-type-constants">
      <title id="gio-file-type-constants-title">Gio File Type Constants</title>

      <para>
	  Indicates the file's on-disk type.
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>gio.FILE_TYPE_DIRECTORY</literal></term>
	  <listitem>
	    <simpara>File handle represents a directory.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_TYPE_MOUNTABLE</literal></term>
	  <listitem>
	    <simpara>File is a mountable location.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_TYPE_REGULAR</literal></term>
	  <listitem>
	    <simpara>File handle represents a regular file.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_TYPE_SHORTCUT</literal></term>
	  <listitem>
	    <simpara>File is a shortcut (Windows systems).</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_TYPE_SPECIAL</literal></term>
	  <listitem>
	    <simpara>File is a "special" file, such as a socket, fifo, block device, or character device.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_TYPE_SYMBOLIC_LINK</literal></term>
	  <listitem>
	    <simpara>File handle represents a symbolic link (Unix systems).</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.FILE_TYPE_UNKNOWN</literal></term>
	  <listitem>
	    <simpara>File's type is unknown.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="gio-mount-mount-flags-constants">
      <title id="gio-mount-mount-flags-constants-title">Gio Mount Mount Flags Constants</title>

      <para>
	  Flags used when mounting a mount.
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>gio.MOUNT_MOUNT_NONE</literal></term>
	  <listitem>
	    <simpara>No flags set.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="gio-mount-unmount-flags-constants">
      <title id="gio-mount-unmount-flags-constants-title">Gio Mount Unmount Flags Constants</title>

      <para>
	  Flags used when unmounting a mount.
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>gio.MOUNT_UNMOUNT_NONE</literal></term>
	  <listitem>
	    <simpara>No flags set.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gio.MOUNT_UNMOUNT_FORCE</literal></term>
	  <listitem>
	    <simpara>Unmount even if there are outstanding file operations on the mount.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>
  </refsect1>

</refentry>
